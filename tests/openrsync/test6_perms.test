#! /bin/sh

. ${tstdir-.}/lib.sh
. ${tstdir-.}/conf.sh

rm -rf dir1 dir2 dir3
# make the copy-from-here tree
mkdir dir1
cd dir1
generate_tree_1
# make the tree we want to compare to
mkdir ../dir2
cd ../dir2
generate_tree_1

# Also make the target tree and mess up some permissions in there.
# We expect rsync to reset this to what dir1 has.
mkdir ../dir3
cd ../dir3
generate_tree_1
chmod 600 foo/bar/baz/one.txt
chmod 070 foo/bar/baz/one2.txt

cd ..
rsync -a -- dir1/ dir3
compare_trees dir2 dir3

# Run a test with r/o directories
1>&2 echo ">> Running r/o directory test"
rm -rf dir1 dir2 dir3
mkdir -p dir1/logs
echo 'first' > dir1/logs/first.txt
chmod -R 0555 dir1/logs

cp -Rp dir1 dir2
1>&2 echo "> Initial sync"
rsync -a -- dir1/ dir3
compare_trees dir2 dir3

1>&2 echo "> Update and re-sync"
for updir in dir1 dir2; do
	chmod -R 0755 "$updir"/logs
	echo 'updated' >> "$updir"/logs/first.txt
	echo 'new' > "$updir"/logs/second.txt
	chmod -R 0555 "$updir"/logs
done

rsync -a -- dir1/ dir3
compare_trees dir2 dir3

1>&2 echo ">> Running mixed permission destination dest"

# We'll try again, but with some mixed ownership that we expect to succeed
# because we retain read access to the reference files.
chmod -R 0755 dir1 dir2 dir3
rm -rf dir1 dir2 dir3

setup_dir() {

	tdir="$1"

	sudo rm -rf "$tdir"

	mkdir -p "$tdir"/dir
	echo "contents" > "$tdir"/file
	echo "dir/contents" > "$tdir"/dir/file
}

setup_dir dir1
setup_dir dir3

sudo chown -R root dir3/dir/*
sleep 1
find dir1 -type f -exec touch {} \;
cp -Rp dir1 dir2

rsync -a --no-W --no-o -- dir1/ dir3/
compare_trees -t dir2 dir3
