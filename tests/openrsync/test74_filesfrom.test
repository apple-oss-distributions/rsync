#! /bin/sh

. ${tstdir-.}/lib.sh
. ${tstdir-.}/conf.sh

SRC="src"
DST="dst"
#SRC="localhost:$PWD/src"
#DST="localhost:$PWD/dst"

# Tests for --files-from

# Create the source tree:
#
rm -rf src dst
mkdir -p src/dir1/dir2

for f in a b c ; do
    jot -r 31 >> src/${f}
    compress -c src/${f} >> src/${f}.o
    jot -r 37 >> src/dir1/${f}
    compress -c src/${f} >> src/dir1/${f}.a
    jot -r 43 >> src/dir1/dir2/${f}
    compress -c src/${f} >> src/dir1/dir2/${f}.z
done

# rsync -a with no filter file should replicate
# the source to the non-existing destination:
#
rm -f flist
for file in $(find src/); do
	echo ${file#src/} >> flist
done

echo "Test 1"
1>&2 echo "Test 1"
rsync -a --files-from=flist -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 1.1"
1>&2 echo "Test 1.1"
cat flist | tr '\n' '\r' > flistr
rm -rf dst
rsync -a --files-from=flistr -- ${SRC}/ ${DST}/
compare_trees src dst

# Test --files-from=/dev/null

rm -rf dst
echo "Test 2"
1>&2 echo "Test 2"
rsync -a --files-from=/dev/null -- ${SRC}/ ${DST}/
X=$(find dst 2>/dev/null | wc -l)
[ "$X" -eq 1 -o "$X" -eq 0 ]

# Test that --from0/-0 works correctly with -F, --exclude-from, and --include-from,
# and --files-from.

# rsync -a --XXX with no filter file should replicate
# the source to the non-existing destination:
#
echo "Test 3"
1>&2 echo "Test 3"
for opt in "-0" "--from0" "-0 -F" "-0 -FF" "--from0 -F" "--from0 -FF" ; do
    rm -rf dst
    rsync -a ${opt} -- ${SRC}/ ${DST}/
    compare_trees -t src dst
done

# Test that /dev/null as include/excludes files work as expected:
#
echo "Test 4"
1>&2 echo "Test 4"
for opt in "--exclude-from" "--include-from" "-0 --include-from" "-0 --exclude-from" ; do
    rm -rf dst
    rsync -a ${opt}=/dev/null -- ${SRC}/ ${DST}/
    compare_trees -t src dst
done

echo "Test 5"
1>&2 echo "Test 5"
for opt in "--files-from" "-0 --files-from" ; do
    rm -rf dst
    rsync -a ${opt}=/dev/null -- ${SRC}/ ${DST}/
    X=$(find dst 2>/dev/null | wc -l)
    [ "$X" -eq 1 -o "$X" -eq 0 ]
done

# Test that empty include/excludes pattern files and those
# with only comments work as expected:
#
rm -f patterns
> patterns

echo "Test 6"
1>&2 echo "Test 6"
for opt in "--exclude-from" "--include-from" ; do
    rm -rf dst
    rsync -a ${opt}=patterns -- ${SRC}/ ${DST}/
    compare_trees -t src dst
done

echo "Test 7"
1>&2 echo "Test 7"
for opt in "--exclude-from" "--include-from" ; do
    rm -f patterns
    > patterns
    for i in $(seq 4) ; do
        rm -rf dst
        rsync -a ${opt}=patterns -- ${SRC}/ ${DST}/
        compare_trees -t src dst
	[ $i -eq 1 ] && echo ';' >> patterns
	[ $i -eq 2 ] && echo '#' >> patterns
	[ $i -eq 3 ] && echo >> patterns
    done
done

# Test that empty --files-from pattern files and those
# with only comments work as expected:
#
echo "Test 8"
1>&2 echo "Test 8"
for opt in "--files-from" "-O --files-from" ; do
    rm -f patterns
    > patterns
    for i in $(seq 4) ; do
        rm -rf dst
        rsync -a ${opt}=patterns -- ${SRC}/ ${DST}/
	[ -d dst ] || continue
        X=$(find dst | wc -l)
        [ "$X" -eq 1 -o "$X" -eq 0 ]
	[ $i -eq 1 ] && echo ';' >> patterns
	[ $i -eq 2 ] && echo '#' >> patterns
	[ $i -eq 3 ] && echo >> patterns
    done
done

# Create a newline-terminated pattern file:
#
cat <<- EOF > patterns
# $(date)

*.o
*.a
;;; *.z
*.c
foobie-bletch
EOF

# Check that both a newline and a nul-delimited excludes
# file works as expected:
#
cat patterns | tr '\n' '\0' > excludes0
cp patterns excludes

rm -rf ref
cp -a src ref
find ref -name \*.[oac] -exec rm -f {} \;
touch -t 200102030405 $(find src ref)

echo "Test 9"
1>&2 echo "Test 9"
for opt in "--from0" "-0" "--from0 -0" ; do
    rm -rf dst
    rsync -a ${opt} --exclude-from=excludes0 -- ${SRC}/ ${DST}/
    compare_trees -t ref dst
done

rm -rf dst
echo "Test 10"
1>&2 echo "Test 10"
rsync -a --exclude-from=excludes -- ${SRC}/ ${DST}/
compare_trees -t ref dst


# Check that both a newline and a nul-delimited includes
# file works as expected:
#
cat patterns | tr '\n' '\0' > includes0
cp patterns includes

echo "Test 11"
1>&2 echo "Test 11"
for opt in "--from0" "-0" "--from0 -0" ; do
    rm -rf dst
    rsync -a ${opt} --include-from=includes0 -- ${SRC}/ ${DST}/
    compare_trees -t src dst
done

rm -rf dst
echo "Test 12"
1>&2 echo "Test 12"
rsync -a --include-from=includes -- ${SRC}/ ${DST}/
compare_trees -t src dst

# Using the same pattern file for both includes and excludes
# should result in the dest dir being a replica of the
# source dir:
#
echo "Test 13"
1>&2 echo "Test 13"
for opt in "--from0" "-0" "--from0 -0" ; do
    rm -rf dst
    rsync -a ${opt} --exclude-from=excludes0 --include-from=excludes0 -- ${SRC}/ ${DST}/
    compare_trees -t ref dst
done

rm -rf dst
echo "Test 14"
1>&2 echo "Test 14"
rsync -a --exclude-from=patterns --include-from=patterns -- ${SRC}/ ${DST}/
compare_trees -t ref dst

# An includes file that contains only the directory structure of
# the source dir should cause rsync to replicate the source dir
# to the destination:
#
(cd src && find . -type d | xargs -n1 -I{} echo {}/) > patterns

cat patterns | tr '\n' '\0' > files0

rm -rf dst
echo "Test 15"
1>&2 echo "Test 15"
rsync -a --from0 --files-from=files0 -- ${SRC}/ ${DST}/
compare_trees src dst

# Same as above, but with some suspicious-looking yet valid file/dir names:
#
mkdir -p src/.../...
mkdir -p src/..../....
mkdir -p src/...../.....
mkdir src/dir.
mkdir src/dir..
mkdir src/dir...
mkdir src/dir....
mkdir src/dir.....
mkdir src/.dir
mkdir src/..dir
mkdir src/...dir
mkdir src/....dir
mkdir src/.....dir
mkdir src/.dir.
mkdir src/..dir..
mkdir src/...dir...
mkdir src/....dir....
mkdir src/.....dir....

(cd src && find . -type d | xargs -n1 -I{} echo {}/) > patterns

echo "./." >> patterns
echo "././" >> patterns
echo "././." >> patterns
echo "./././" >> patterns
echo "./././." >> patterns

echo "..." >> patterns
echo ".../" >> patterns
echo ".../." >> patterns
echo ".../.." >> patterns
echo ".../..." >> patterns
echo ".../.../" >> patterns
echo ".../.../." >> patterns
echo ".../.../.." >> patterns
echo ".../.../../." >> patterns
echo ".../.../../.." >> patterns

echo ".." >> patterns
echo "../" >> patterns
echo "../." >> patterns
echo "../.." >> patterns
echo "/.." >> patterns
echo "/../" >> patterns
echo "/../." >> patterns
echo "/../.." >> patterns

echo "./.." >> patterns
echo "./../" >> patterns
echo "./../." >> patterns

echo "./." >> patterns
echo ".//" >> patterns
echo ".//." >> patterns
echo ".///" >> patterns
echo ".///." >> patterns

echo "/" >> patterns
echo "//" >> patterns
echo "///" >> patterns
echo "///..///" >> patterns
echo "/dir1/dir2/" >> patterns
echo "/dir1/../dir2/.." >> patterns
echo "/../dir1/../dir2/.." >> patterns
echo "///////dir1////////dir2/////////" >> patterns

cat patterns | tr '\n' '\0' > patterns0

rm -rf dst
echo "Test 16"
1>&2 echo "Test 16"
rsync -a --files-from=patterns -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
[ -d dst ]
compare_trees src dst

echo "Test 16.1"
1>&2 echo "Test 16.1"
rm -rf dst
rsync -a --files-from=- -- ${SRC}/ ${DST}/ < patterns || [ $? -eq 23 ]
[ -d dst ]
compare_trees src dst

echo "Test 16.2"
1>&2 echo "Test 16.2"
rm -rf dst
rsync -a --from0 --files-from=patterns0 -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
[ -d dst ]
compare_trees src dst

echo "Test 16.3"
1>&2 echo "Test 16.3"
rm -rf dst
rsync -a --from0 --files-from=- -- ${SRC}/ ${DST}/ < patterns0 || [ $? -eq 23 ]
[ -d dst ]
compare_trees src dst


# A non-existent file should cause rsync to exit 23:
#
echo "/dir1/../dir2/" >> patterns
cat patterns | tr '\n' '\0' > patterns0

rm -rf dst
echo "Test 16.4"
1>&2 echo "Test 16.4"
rsync -a --from0 --files-from=patterns0 -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
compare_trees src dst


# Test non-existent (but otherwise valid) directories in src/:
#
rm patterns
echo "./dir/." >> patterns
echo "././dir/." >> patterns
echo "././dir/./" >> patterns
echo "././dir/./." >> patterns
echo "dir/./" >> patterns
echo "dir/./." >> patterns
echo "dir/././" >> patterns

cat patterns | tr '\n' '\0' > patterns0

echo "Test 17"
1>&2 echo "Test 17"
rm -rf dst
rsync -an --from0 --files-from=patterns0 -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
[ ! -d dst ]

# Openrsync fails to create dest dir when acting as client-receiver.
#
echo "Test 17.1"
1>&2 echo "Test 17.1"
rsync -a --from0 --files-from=patterns0 -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
if [ -d dst ] ; then
    X=$(ls -a dst | wc -l)
    [ "$X" -eq 2 ]
fi


# Test a single directory name:
#
rm -rf src ref

mkdir src
mkdir src/dir0
cp -a src ref
jot -r 3 > src/dir0/file
jot -r 5 > src/file
touch src ref

echo "Test 18"
1>&2 echo "Test 18"
echo "dir0" > flist
rm -rf dst
rsync -a --files-from=flist -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 18.1"
1>&2 echo "Test 18.1"
echo "dir0/" > flist
cp -a src/dir0/file ref/dir0/
touch src/dir0 ref/dir0
rm -rf dst
rsync -a --files-from=flist -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 18.2"
1>&2 echo "Test 18.2"
echo "dir0/doesnotexist" > flist
rm -rf dst
rsync -a --files-from=flist -- ${SRC}/ ${DST}/ || [ $? -eq 23 -o $? -eq 32 ]
if [ -d dst ] ; then
    X=$(find dst | wc -l)
    [ "$X" -eq 1 ]
fi

echo "Test 18.3"
1>&2 echo "Test 18.3"
echo "dir0/doesnotexist/" > flist
rm -rf dst
rsync -a --files-from=flist -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
if [ -d dst ] ; then
    X=$(find dst | wc -l)
    [ "$X" -eq 1 ]
fi


# Same as above but with --relative:
#
echo "dir0/" > flist

echo "Test 19"
1>&2 echo "Test 19"
rm -rf dst
rsync -a --files-from=flist --relative -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 19.1"
1>&2 echo "Test 19.1"
rm -rf dst
rsync -a --files-from=flist -- ${SRC} ${DST}/
compare_trees ref dst

echo "Test 19.2"
1>&2 echo "Test 19.2"
rm -rf dst
rsync -a -- ${SRC} ${DST}/
compare_trees src dst/src

echo "Test 19.3"
1>&2 echo "Test 19.3"
rm -rf dst
rsync -a --relative -L -- ${SRC}/ ${DST}/
[ -d dst/src ] && compare_trees src dst/src

echo "Test 19.4"
1>&2 echo "Test 19.4"
rm -rf ref dst
mkdir ref
cp -a src/dir0/file ref/
rsync -a --files-from=flist --no-relative -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 19.5"
1>&2 echo "Test 19.5"
echo "dir1/" >> flist
mkdir src/dir1
jot -r 7 > src/dir1/file1
cp -a src/dir1/file1 ref/
rm -rf dst
rsync -a --files-from=flist --no-relative -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 19.6"
1>&2 echo "Test 19.6"
rm -rf dst
rsync -a --files-from=flist --no-relative --recursive -- ${SRC}/ ${DST}/
compare_trees ref dst


# Test a single file name:
#
rm -rf src ref

mkdir src
date > src/file0
cp -a src ref
mkdir src/dir0
date > src/dir0/file1
touch src ref

echo "Test 20"
1>&2 echo "Test 20"
echo "file0" > flist
rm -rf dst
rsync -a --files-from=flist -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 20.1"
1>&2 echo "Test 20.1"
echo "file0/" > flist
rsync -a --files-from=flist -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
compare_trees ref dst

echo "Test 20.2"
1>&2 echo "Test 20.2"
echo "file0/doesnotexist" > flist
rsync -a --files-from=flist -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
compare_trees ref dst

echo "Test 20.3"
1>&2 echo "Test 20.3"
echo "file0/doesnotexist/" > flist
rsync -a --files-from=flist -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
[ -d dst ] && compare_trees ref dst


# Same as above but with --relative:
#
echo "Test 21"
1>&2 echo "Test 21"
echo "file0" > flist
rm -rf dst
rsync -a --relative --files-from=flist -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 21.1"
1>&2 echo "Test 21.1"
rm -rf dst
rsync -a --files-from=flist -- ${SRC} ${DST}/
compare_trees ref dst

echo "Test 21.2"
1>&2 echo "Test 21.2"
rm -rf dst
rsync -a -- ${SRC} ${DST}/
compare_trees src dst/src

echo "Test 21.3"
1>&2 echo "Test 21.3"
rm -rf dst
rsync -a --relative -L -- ${SRC}/ ${DST}/
[ -d dst/src ] && compare_trees src dst/src


# Test a file name made of only spaces including some comments
# and blank lines:
#
rm -rf ref/* dst

spc="   "
date > src/"${spc}"
date > src/"${spc}#"
date > src/"${spc};"
cp -a src/"${spc}" ref/
cp -a src/"${spc}#" ref/
cp -a src/"${spc};" ref/
touch src ref

echo > flist
echo >> flist
echo >> flist
echo >> flist
echo "# comment 1" >> flist
echo "; comment 2" >> flist
echo >> flist
echo "${spc}#" >> flist
echo "${spc}" >> flist
echo "${spc};" >> flist
echo >> flist
echo "; comment 3" >> flist
echo "# comment 4" >> flist
echo >> flist
echo >> flist
echo >> flist

echo "Test 22"
1>&2 echo "Test 22"
rsync -a --files-from=flist -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
compare_trees ref dst

echo "Test 22.1"
1>&2 echo "Test 22.1"
rm -rf dst
rsync -a --files-from=- -- ${SRC}/ ${DST}/ < flist || [ $? -eq 23 ]
compare_trees ref dst

echo "Test 22.2"
1>&2 echo "Test 22.2"
cat flist | tr '\n' '\0' > flist0
rm -rf dst
rsync -a --from0 --files-from=flist0 -- ${SRC}/ ${DST}/ || [ $? -eq 23 ]
compare_trees ref dst

echo "Test 22.3"
1>&2 echo "Test 22.3"
rm -rf dst
rsync -a --from0 --files-from=- -- ${SRC}/ ${DST}/ < flist0 || [ $? -eq 23 ]
compare_trees ref dst


# Test some files with embedded newlines.
#
rm -rf src dst

mkdir src
seq 1 2 > src/"
"

seq 3 4 > src/"a
"

seq 5 6 > src/"
z"

seq 7 8 > src/"a
z"

rm flist
echo "x" >> flist
echo "ax" >> flist
echo "xz" >> flist
echo "axz" >> flist

cat flist | tr '\n' '\0' > flistx
cat flistx | tr 'x' '\n'  > flist0

echo "Test 23"
1>&2 echo "Test 23"
rsync -a --from0 --files-from=flist0 -- ${SRC}/ ${DST}/
compare_trees src dst


# The following test verifies that a largish files-from file
# can be successfully read and transmitted to a remote sender
# over a non-blocking channel.
#
FILEBASE="testfile$$"
DIRBASE="testdir$$"
NDIRS=5
NFILES=7

echo "Test24: Creating large files-from file..."
1>&2 echo "Test24: Creating large files-from file..."
rm -rf src ref
mkdir src

# Create a multi-level tree with several files in each directory.
# All files contain random contents, but are identically named.
#
for d in $(seq 1 ${NDIRS}) ; do
    mkdir -p src/${DIRBASE}-$d/${DIRBASE}-$d/${DIRBASE}-$d
    for f in $(seq 1 ${NFILES}) ; do
	jot -r 5 > src/${DIRBASE}-$d/${FILEBASE}-$f
	jot -r 7 > src/${DIRBASE}-$d/${DIRBASE}-$d/${FILEBASE}-$f
	jot -r 9 > src/${DIRBASE}-$d/${DIRBASE}-$d/${DIRBASE}-$d/${FILEBASE}-$f
    done
done

cp -a src ref
find ref -type f | xargs rm

find ref | sed -En 's%^ref/%%p' > ffdirs
find src -type f | sed -En 's%^src/%%p' > fffiles

# Test NL/CR terminated list, dirs not ending in "/":
#
echo "Test 24"
1>&2 echo "Test 24"
rm -rf dst
rsync -a --files-from=ffdirs -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 24.1"
1>&2 echo "Test 24.1"
rm -rf dst
rsync -a --files-from=- < ffdirs -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 24.2"
1>&2 echo "Test 24.2"
rm -rf dst
rsync -a --files-from=ffdirs --recursive -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 24.3"
1>&2 echo "Test 24.3"
rm -rf dst
rsync -a --files-from=fffiles -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 24.4"
1>&2 echo "Test 24.4"
rm -rf dst
rsync -a --files-from=- < fffiles -- ${SRC}/ ${DST}/
compare_trees src dst


# Test NUL terminated list, dirs not ending in "/":
#
cat ffdirs | tr '\n' '\0' > ffdirs0
cat fffiles | tr '\n' '\0' > fffiles0

echo "Test 25"
1>&2 echo "Test 25"
rm -rf dst
rsync -a --from0 --files-from=ffdirs0 -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 25.1"
1>&2 echo "Test 25.1"
rm -rf dst
rsync -a -0 --files-from=- < ffdirs0 -- ${SRC}/ ${DST}/
compare_trees ref dst

echo "Test 25.2"
1>&2 echo "Test 25.2"
rm -rf dst
rsync -a -0 --files-from=fffiles0 -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 25.3"
1>&2 echo "Test 25.3"
rm -rf dst
rsync -a --from0 --files-from=- < fffiles0 -- ${SRC}/ ${DST}/
compare_trees src dst


# Test dirs ending in "/":
#
find ref | sed -En 's%^ref/(.*)%\1/%p' > ffdirs
cat ffdirs | tr '\n' '\0' > ffdirs0

echo "Test 26"
1>&2 echo "Test 26"
rm -rf dst
rsync -a --files-from=ffdirs -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 26.1"
1>&2 echo "Test 26.1"
rm -rf dst
rsync -a --files-from=- < ffdirs -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 26.2"
1>&2 echo "Test 26.2"
rm -rf dst
rsync -a --from0 --files-from=ffdirs0 -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 26.3"
1>&2 echo "Test 26.3"
rm -rf dst
rsync -a --from0 --files-from=- < ffdirs0 -- ${SRC}/ ${DST}/
compare_trees src dst

echo "Test 27"
1>&2 echo "Test 27"
rm -rf dst
xfer=$(head -1 fffiles)
echo "$xfer" | tr -d $'\n' | rsync -a --files-from=- -- ${SRC}/ ${DST}/
cmp -s src/"$xfer" dst/"$xfer"

echo "Test 27.1"
1>&2 echo "Test 27.1"
rm -rf dst
# This differs from the previous test in that it confirms that rsync is properly
# nul-terminating the second entry that didn't have any EOL marker.
flong="$DIRBASE-1/$DIRBASE-1/$FILEBASE-2"
fshort="$DIRBASE-1/$FILEBASE-2"
printf "$flong\n$fshort" | rsync -a --files-from=- -- ${SRC}/ ${DST}/
for target in $flong $fshort; do
	cmp -s src/"$target" dst/"$target"
done
